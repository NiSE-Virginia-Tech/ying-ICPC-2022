<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>SpotBugs Report</title>
<style type="text/css">
		.tablerow0 {
			background: #EEEEEE;
		}

		.tablerow1 {
			background: white;
		}

		.detailrow0 {
			background: #EEEEEE;
		}

		.detailrow1 {
			background: white;
		}

		.tableheader {
			background: #b9b9fe;
			font-size: larger;
		}

		.tablerow0:hover, .tablerow1:hover {
			background: #aaffaa;
		}

		.priority-1 {
		    color: red;
		    font-weight: bold;
		}
		.priority-2 {
		    color: orange;
		    font-weight: bold;
		}
		.priority-3 {
		    color: green;
		    font-weight: bold;
		}
		.priority-4 {
		    color: blue;
		    font-weight: bold;
		}
		</style>
<script type="text/javascript">
			function toggleRow(elid) {
				if (document.getElementById) {
					element = document.getElementById(elid);
					if (element) {
						if (element.style.display == 'none') {
							element.style.display = 'block';
							//window.status = 'Toggle on!';
						} else {
							element.style.display = 'none';
							//window.status = 'Toggle off!';
						}
					}
				}
			}
		</script>
</head>
<body>
<h1>
<a href="https://spotbugs.github.io/">SpotBugs</a> Report</h1>
<h2>Project Information</h2>
<p>Project: 
		</p>
<p>SpotBugs version: 3.1.12</p>
<p>Code analyzed:</p>
<ul>
<li>/xxx/CryptoAPIDetect/dataset/ApacheCryptoAPI-Bench/apache_codes/jarfile/taverna-perspective-myexperiment-3.1.0-incubating-SNAPSHOT.jar</li>
</ul>
<p>
<br/>
<br/>
</p>
<h2>Metrics</h2>
<p>7802 lines of code analyzed,
	in 93 classes, 
	in 3 packages.</p>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Metric</th>
<th align="right">Total</th>
<th align="right">Density*</th>
</tr>
<tr class="tablerow0">
<td>High Priority Warnings</td>
<td align="right">7</td>
<td align="right">0.90</td>
</tr>
<tr class="tablerow1">
<td>Medium Priority Warnings</td>
<td align="right">8</td>
<td align="right">1.03</td>
</tr>
<tr class="$totalClass">
<td>
<b>Total Warnings</b>
</td>
<td align="right">
<b>15</b>
</td>
<td align="right">
<b>1.92</b>
</td>
</tr>
</table>
<p>
<i>(* Defects per Thousand lines of non-commenting source statements)</i>
</p>
<p>
<br/>
<br/>
</p>
<h2>Contents</h2>
<ul>
<li>
<a href="#Warnings_SECURITY">Security Warnings</a>
</li>
<li>
<a href="#Details">Details</a>
</li>
</ul>
<h1>Summary</h1>
<table width="500" cellpadding="5" cellspacing="2">
<tr class="tableheader">
<th align="left">Warning Type</th>
<th align="right">Number</th>
</tr>
<tr class="tablerow0">
<td>
<a href="#Warnings_SECURITY">Security Warnings</a>
</td>
<td align="right">15</td>
</tr>
<tr class="tablerow1">
<td>
<b>Total</b>
</td>
<td align="right">
<b>15</b>
</td>
</tr>
</table>
<h1>Warnings</h1>
<p>Click on a warning row to see full context information.</p>
<h2>
<a name="Warnings_SECURITY">Security Warnings</a>
</h2>
<table class="warningtable" width="100%" cellspacing="0">
<tr class="tableheader">
<th align="left">Code</th>
<th align="left">Warning</th>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67383');">
<td>
<span class="priority-1">CIPINT</span>
</td>
<td>The cipher does not provide data integrity</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67383" style="display: none;">
<a href="#CIPHER_INTEGRITY">Bug type CIPHER_INTEGRITY (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.Util<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.Util.doEncryption(String, int)<br/>At Util.java:[line 105]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65551');">
<td>
<span class="priority-2">SECCRLFLOG</span>
</td>
<td>This use of org/apache/log4j/Logger.error(Ljava/lang/Object;)V might be used to include CRLF characters into log messages</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65551" style="display: none;">
<a href="#CRLF_INJECTION_LOGS">Bug type CRLF_INJECTION_LOGS (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.Base64<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.Base64.usage(String)<br/>At Base64.java:[line 440]<br/>Sink method org/apache/log4j/Logger.error(Ljava/lang/Object;)V<br/>Sink parameter 0<br/>Unknown source org/apache/taverna/ui/perspectives/myexperiment/model/Base64.usage(Ljava/lang/String;)V parameter 0<br/>Method usage with tainted arguments detected<br/>At Base64.java:[line 428]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67437');">
<td>
<span class="priority-1">SECMD5</span>
</td>
<td>This API MD5 (MDX) is not a recommended cryptographic hash function</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67437" style="display: none;">
<a href="#WEAK_MESSAGE_DIGEST_MD5">Bug type WEAK_MESSAGE_DIGEST_MD5 (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.Util<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.Util.doEncryption(String, int)<br/>At Util.java:[line 97]<br/>Value MD5</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65635');">
<td>
<span class="priority-1">SECOBDES</span>
</td>
<td>Object deserialization is used in org.apache.taverna.ui.perspectives.myexperiment.model.Base64.decodeToObject(String)</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65635" style="display: none;">
<a href="#OBJECT_DESERIALIZATION">Bug type OBJECT_DESERIALIZATION (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.Base64<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.Base64.decodeToObject(String)<br/>At Base64.java:[line 1083]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65689');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65689" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.Base64<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.Base64.decodeFileToFile(String, String)<br/>At Base64.java:[line 1332]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/taverna/ui/perspectives/myexperiment/model/Base64.decodeFileToFile(Ljava/lang/String;Ljava/lang/String;)Z parameter 1<br/>Method usage with tainted arguments detected<br/>At Base64.java:[line 425]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65773');">
<td>
<span class="priority-1">SECPTI</span>
</td>
<td>This API (java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65773" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.Base64<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.Base64.encodeFileToFile(String, String)<br/>At Base64.java:[line 1295]<br/>Sink method java/io/FileInputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/taverna/ui/perspectives/myexperiment/model/Base64.encodeFileToFile(Ljava/lang/String;Ljava/lang/String;)Z parameter 1<br/>Method usage with tainted arguments detected<br/>At Base64.java:[line 422]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N65857');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N65857" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.Base64<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.Base64.decodeFromFile(String)<br/>At Base64.java:[line 1191]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/taverna/ui/perspectives/myexperiment/model/Base64.decodeFromFile(Ljava/lang/String;)[B parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N65931');">
<td>
<span class="priority-2">SECPTI</span>
</td>
<td>This API (java/io/File.&lt;init&gt;(Ljava/lang/String;)V) reads a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N65931" style="display: none;">
<a href="#PATH_TRAVERSAL_IN">Bug type PATH_TRAVERSAL_IN (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.Base64<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.Base64.encodeFromFile(String)<br/>At Base64.java:[line 1248]<br/>Sink method java/io/File.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/taverna/ui/perspectives/myexperiment/model/Base64.encodeFromFile(Ljava/lang/String;)Ljava/lang/String; parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66005');">
<td>
<span class="priority-1">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66005" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.Base64<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.Base64.decodeFileToFile(String, String)<br/>At Base64.java:[line 1336]<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/taverna/ui/perspectives/myexperiment/model/Base64.decodeFileToFile(Ljava/lang/String;Ljava/lang/String;)Z parameter 0<br/>Method usage with tainted arguments detected<br/>At Base64.java:[line 425]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66089');">
<td>
<span class="priority-1">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66089" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.Base64<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.Base64.encodeFileToFile(String, String)<br/>At Base64.java:[line 1299]<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/taverna/ui/perspectives/myexperiment/model/Base64.encodeFileToFile(Ljava/lang/String;Ljava/lang/String;)Z parameter 0<br/>Method usage with tainted arguments detected<br/>At Base64.java:[line 422]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66173');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66173" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.Base64<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.Base64.decodeToFile(String, String)<br/>At Base64.java:[line 1155]<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/taverna/ui/perspectives/myexperiment/model/Base64.decodeToFile(Ljava/lang/String;Ljava/lang/String;)Z parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66247');">
<td>
<span class="priority-2">SECPTO</span>
</td>
<td>This API (java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V) writes to a file whose location might be specified by user input</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66247" style="display: none;">
<a href="#PATH_TRAVERSAL_OUT">Bug type PATH_TRAVERSAL_OUT (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.Base64<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.Base64.encodeToFile(byte[], String)<br/>At Base64.java:[line 1121]<br/>Sink method java/io/FileOutputStream.&lt;init&gt;(Ljava/lang/String;)V<br/>Sink parameter 0<br/>Unknown source org/apache/taverna/ui/perspectives/myexperiment/model/Base64.encodeToFile([BLjava/lang/String;)Z parameter 0<br/>Method usage not detected</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N66321');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N66321" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.MyExperimentClient<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.MyExperimentClient.doMyExperimentDELETE(String)<br/>At MyExperimentClient.java:[line 421]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source org/apache/taverna/ui/perspectives/myexperiment/model/MyExperimentClient.doMyExperimentDELETE(Ljava/lang/String;)Lorg/apache/taverna/ui/perspectives/myexperiment/model/ServerResponse; parameter 0<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>At MyExperimentClient.java:[line 420]<br/>At MyExperimentClient.java:[line 1149]</p>
</td>
</tr>
<tr class="tablerow0" onclick="toggleRow('N66415');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow0">
<td/>
<td>
<p id="N66415" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.MyExperimentClient<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.MyExperimentClient.doMyExperimentGET(String)<br/>At MyExperimentClient.java:[line 352]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>Unknown source org/apache/taverna/ui/perspectives/myexperiment/model/MyExperimentClient.doMyExperimentGET(Ljava/lang/String;)Lorg/apache/taverna/ui/perspectives/myexperiment/model/ServerResponse; parameter 0<br/>At MainComponent.java:[line 551]<br/>At MainComponent.java:[line 460]<br/>At MyStuffTabContentPanel.java:[line 309]<br/>At ResourcePreviewBrowser.java:[line 253]<br/>At ResourcePreviewFactory.java:[line 134]<br/>At ResourcePreviewFactory.java:[line 137]<br/>At ResourcePreviewFactory.java:[line 147]<br/>At MyExperimentClient.java:[line 255]<br/>At MyExperimentClient.java:[line 312]<br/>At MyExperimentClient.java:[line 351]<br/>At MyExperimentClient.java:[line 500]<br/>At MyExperimentClient.java:[line 514]<br/>At MyExperimentClient.java:[line 543]<br/>At MyExperimentClient.java:[line 549]<br/>At MyExperimentClient.java:[line 550]<br/>At MyExperimentClient.java:[line 553]<br/>At MyExperimentClient.java:[line 556]<br/>At MyExperimentClient.java:[line 559]<br/>At MyExperimentClient.java:[line 563]<br/>At MyExperimentClient.java:[line 567]<br/>At MyExperimentClient.java:[line 570]<br/>At MyExperimentClient.java:[line 578]<br/>At MyExperimentClient.java:[line 585]<br/>At MyExperimentClient.java:[line 590]<br/>At MyExperimentClient.java:[line 602]<br/>At MyExperimentClient.java:[line 635]<br/>At MyExperimentClient.java:[line 637]<br/>At MyExperimentClient.java:[line 645]<br/>At MyExperimentClient.java:[line 648]<br/>At MyExperimentClient.java:[line 669]<br/>At MyExperimentClient.java:[line 671]<br/>At MyExperimentClient.java:[line 708]<br/>At MyExperimentClient.java:[line 716]<br/>At MyExperimentClient.java:[line 717]<br/>At MyExperimentClient.java:[line 720]<br/>At MyExperimentClient.java:[line 724]<br/>At MyExperimentClient.java:[line 785]<br/>At MyExperimentClient.java:[line 792]<br/>At MyExperimentClient.java:[line 796]<br/>At MyExperimentClient.java:[line 800]<br/>At MyExperimentClient.java:[line 810]<br/>At MyExperimentClient.java:[line 812]<br/>At MyExperimentClient.java:[line 833]<br/>At MyExperimentClient.java:[line 834]<br/>At MyExperimentClient.java:[line 836]<br/>At MyExperimentClient.java:[line 858]<br/>At MyExperimentClient.java:[line 876]<br/>At MyExperimentClient.java:[line 906]<br/>At MyExperimentClient.java:[line 935]<br/>At MyExperimentClient.java:[line 936]<br/>At MyExperimentClient.java:[line 961]<br/>At MyExperimentClient.java:[line 964]<br/>At MyExperimentClient.java:[line 971]<br/>At MyExperimentClient.java:[line 1135]<br/>At MyExperimentClient.java:[line 1137]<br/>At MyExperimentClient.java:[line 1138]<br/>At MyExperimentClient.java:[line 1139]<br/>At MyExperimentClient.java:[line 1141]<br/>At MyExperimentClient.java:[line 1194]<br/>At Pack.java:[line 194]<br/>At Pack.java:[line 207]<br/>At Resource.java:[line 122]<br/>At Resource.java:[line 126]<br/>At SearchEngine.java:[line 89]<br/>At SearchEngine.java:[line 290]<br/>At User.java:[line 102]<br/>At User.java:[line 158]<br/>At Util.java:[line 553]<br/>At Util.java:[line 557]<br/>At Util.java:[line 561]<br/>At Util.java:[line 565]<br/>At Util.java:[line 569]<br/>At Util.java:[line 574]<br/>At Util.java:[line 575]<br/>At Util.java:[line 578]<br/>At Util.java:[line 580]</p>
</td>
</tr>
<tr class="tablerow1" onclick="toggleRow('N67249');">
<td>
<span class="priority-2">SECSSSRFUC</span>
</td>
<td>This web server request could be used by an attacker to expose internal services and filesystem.</td>
</tr>
<tr class="detailrow1">
<td/>
<td>
<p id="N67249" style="display: none;">
<a href="#URLCONNECTION_SSRF_FD">Bug type URLCONNECTION_SSRF_FD (click for details)</a>
<br/>In class org.apache.taverna.ui.perspectives.myexperiment.model.MyExperimentClient<br/>In method org.apache.taverna.ui.perspectives.myexperiment.model.MyExperimentClient.doMyExperimentPOST(String, String)<br/>At MyExperimentClient.java:[line 383]<br/>Sink method java/net/URL.openConnection()Ljava/net/URLConnection;<br/>Sink parameter 0<br/>Unknown source org/apache/taverna/ui/perspectives/myexperiment/model/MyExperimentClient.doMyExperimentPOST(Ljava/lang/String;Ljava/lang/String;)Lorg/apache/taverna/ui/perspectives/myexperiment/model/ServerResponse; parameter 1<br/>Unknown source java/net/URL.&lt;init&gt;(Ljava/lang/String;)V<br/>At MyExperimentClient.java:[line 382]<br/>At MyExperimentClient.java:[line 986]<br/>At MyExperimentClient.java:[line 1073]<br/>At MyExperimentClient.java:[line 1099]<br/>At MyExperimentClient.java:[line 1100]<br/>At MyExperimentClient.java:[line 1117]</p>
</td>
</tr>
</table>
<h1>
<a name="Details">Details</a>
</h1>
<h2>
<a name="CIPHER_INTEGRITY">CIPHER_INTEGRITY: Cipher with no integrity</a>
</h2>
            
<p>
    The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the
    data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection.
</p>
<p>
    The solution is to use a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. Combining a HMAC function to the
    existing cipher is prone to error <sup><a href="https://moxie.org/blog/the-cryptographic-doom-principle/">[1]</a></sup>. Specifically,
    it is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic
    functions on the data.
</p>
<p>The following modes are vulnerable because they don't provide a HMAC:<br/>
    - CBC<br/>
    - OFB<br/>
    - CTR<br/>
    - ECB<br/><br/>
    The following snippets code are some examples of vulnerable code.<br/><br/>
    <b>Code at risk:</b><br/>
    <i>AES in CBC mode</i><br/>

    <pre>Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
    <br/>
    <i>Triple DES with ECB mode</i><br/>

<pre>Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
    <b>Solution:</b>
    <pre>Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);</pre>
</p>
<p>
In the example solution above, the GCM mode introduces an HMAC into the resulting encrypted data, providing integrity of the result.
</p>
<br/>
<p>
    <b>References</b><br/>
    <a href="https://en.wikipedia.org/wiki/Authenticated_encryption">Wikipedia: Authenticated encryption</a><br/>
    <a href="https://csrc.nist.gov/projects/block-cipher-techniques/bcm/modes-develoment#01">NIST: Authenticated Encryption Modes</a><br/>
    <a href="https://moxie.org/blog/the-cryptographic-doom-principle/">Moxie Marlinspike's blog: The Cryptographic Doom Principle</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/353.html">CWE-353: Missing Support for Integrity Check</a>
</p>

        
<h2>
<a name="CRLF_INJECTION_LOGS">CRLF_INJECTION_LOGS: Potential CRLF Injection for logs</a>
</h2>
            
<p>
    When data from an untrusted source is put into a logger and not neutralized correctly,
    an attacker could forge log entries or include malicious content.
    Inserted false entries could be used to skew statistics, distract the administrator
    or even to implicate another party in the commission of a malicious act.
    If the log file is processed automatically, the attacker can render the file unusable
    by corrupting the format of the file or injecting unexpected characters.
    An attacker may also inject code or other commands into the log file and take advantage
    of a vulnerability in the log processing utility (e.g. command injection or XSS).
</p>
<br/>
<p>
<b>Code at risk:</b><br/>
<pre>String val = request.getParameter("user");
String metadata = request.getParameter("metadata");
[...]
if(authenticated) {
    log.info("User " + val + " (" + metadata + ") was authenticated successfully");
}
else {
    log.info("User " + val + " (" + metadata + ") was not authenticated");
}
</pre>

A malicious user could send the metadata parameter with the value: <code>"Firefox) was authenticated successfully\r\n[INFO] User bbb (Internet Explorer"</code>.
</p>

<b>Solution:</b><br/>
<p>
You can manually sanitize each parameter.
<pre>
log.info("User " + val.replaceAll("[\r\n]","") + " (" + userAgent.replaceAll("[\r\n]","") + ") was not authenticated");
</pre>
</p>

<p>
You can also configure your logger service to replace new line for all message events. Here is sample configuration for LogBack <a href="https://logback.qos.ch/manual/layouts.html#replace">using the <code>replace</code> function</a>.
<pre>
&lt;pattern&gt;%-5level - %replace(%msg){'[\r\n]', ''}%n&lt;/pattern&gt;
</pre>
</p>

<p>
Finally, you can use a logger implementation that replace new line by spaces.
The project <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a> has an implementation for Logback and Log4j.
</p>

<br/>
<p>
    <b>References</b><br/>
    <a href="https://cwe.mitre.org/data/definitions/117.html">CWE-117: Improper Output Neutralization for Logs</a><br/>
    <a href="https://cwe.mitre.org/data/definitions/93.html">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://logback.qos.ch/manual/layouts.html#replace">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a><br/>
    <a href="https://github.com/javabeanz/owasp-security-logging">OWASP Security Logging</a><br/>
</p>


        
<h2>
<a name="WEAK_MESSAGE_DIGEST_MD5">WEAK_MESSAGE_DIGEST_MD5: MD2, MD4 and MD5 are weak hash functions</a>
</h2>
            
<p>The algorithms MD2, MD4 and MD5 are not a recommended MessageDigest. <b>PBKDF2</b> should be used to hash password for example.</p>

<blockquote>
    "The security of the MD5 hash function is severely compromised. A collision attack exists that can find collisions
    within seconds on a computer with a 2.6 GHz Pentium 4 processor (complexity of 2<sup>24.1</sup>).[1] Further, there is also a
    chosen-prefix collision attack that can produce a collision for two inputs with specified prefixes within hours, using
    off-the-shelf computing hardware (complexity 2<sup>39</sup>).[2]"<br/>
    - <a href="https://en.wikipedia.org/wiki/MD5#Security">Wikipedia: MD5 - Security</a>
</blockquote>

<blockquote>
    "<b>SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224, and SHA-512/256</b>:<br/>
    The use of these hash functions is acceptable for all hash function applications."<br/>
    - <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths p.15</a>
</blockquote>
<blockquote>
    "The main idea of a PBKDF is to slow dictionary or brute force attacks on the passwords by increasing the time
    needed to test each password. An attacker with a list of likely passwords can evaluate the PBKDF using the known
    iteration counter and the salt. Since an attacker has to spend a significant amount of computing time for each try,
    it becomes harder to apply the dictionary or brute force attacks."<br/>
- <a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation  p.12</a>
</blockquote>
<br/>
<p>
    <b>Vulnerable Code:</b><br/>
    <pre>MessageDigest md5Digest = MessageDigest.getInstance("MD5");
    md5Digest.update(password.getBytes());
    byte[] hashValue = md5Digest.digest();</pre>
    <br/>
    <pre>byte[] hashValue = DigestUtils.getMd5Digest().digest(password.getBytes());</pre>
</p>
<br/>
<p>
    <b>Solution (Using bouncy castle):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    PKCS5S2ParametersGenerator gen = new PKCS5S2ParametersGenerator(new SHA256Digest());
    gen.init(password.getBytes("UTF-8"), salt.getBytes(), 4096);
    return ((KeyParameter) gen.generateDerivedParameters(256)).getKey();
}</pre>
    <br/>
    <b>Solution (Java 8 and later):</b><br/>
    <pre>public static byte[] getEncryptedPassword(String password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {
    KeySpec spec = new PBEKeySpec(password.toCharArray(), salt, 4096, 256 * 8);
    SecretKeyFactory f = SecretKeyFactory.getInstance("PBKDF2WithHmacSHA256");
    return f.generateSecret(spec).getEncoded();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
[1] <a href="https://www.win.tue.nl/hashclash/On%20Collisions%20for%20MD5%20-%20M.M.J.%20Stevens.pdf">On Collisions for MD5</a>: Master Thesis by M.M.J. Stevens<br/>
[2] <a href="https://homepages.cwi.nl/~stevens/papers/stJOC%20-%20Chosen-Prefix%20Collisions%20for%20MD5%20and%20Applications.pdf">Chosen-prefix collisions for MD5 and applications</a>: Paper written by Marc Stevens<br/>
<a href="https://en.wikipedia.org/wiki/MD5">Wikipedia: MD5</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf">NIST: Transitioning the Use of Cryptographic Algorithms and Key Lengths</a><br/>
<a href="https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">NIST: Recommendation for Password-Based Key Derivation</a><br/>
<a href="https://stackoverflow.com/q/22580853/89769">Stackoverflow: Reliable implementation of PBKDF2-HMAC-SHA256 for Java</a><br/>
<a href="https://cwe.mitre.org/data/definitions/327.html">CWE-327: Use of a Broken or Risky Cryptographic Algorithm</a>
</p>

        
<h2>
<a name="OBJECT_DESERIALIZATION">OBJECT_DESERIALIZATION: Object deserialization is used in {1}</a>
</h2>
            
<p>
    Object deserialization of untrusted data can lead to remote code execution, if there is a class in classpath that allows
    the trigger of malicious operation.
</p>
<p>
    Libraries developers tend to fix class that provided potential malicious trigger. There are still classes that are
    known to trigger Denial of Service<sup>[1]</sup>.
</p>
<p>
    Deserialization is a sensible operation that has a great history of vulnerabilities. The web application might
    become vulnerable as soon as a new vulnerability is found in the Java Virtual Machine<sup>[2] [3]</sup>.
</p>

<p>
<b>Code at risk:</b><br/>
<pre>
public UserData deserializeObject(InputStream receivedFile) throws IOException, ClassNotFoundException {

    try (ObjectInputStream in = new ObjectInputStream(receivedFile)) {
        return (UserData) in.readObject();
    }
}
</pre>
</p>

<p>
<b>Solutions:</b><br/>
<p>
Avoid deserializing object provided by remote users.
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/502.html">CWE-502: Deserialization of Untrusted Data</a><br/>
<a href="https://www.owasp.org/index.php/Deserialization_of_untrusted_data">Deserialization of untrusted data</a><br/>
<a href="https://www.oracle.com/technetwork/java/seccodeguide-139067.html#8">Serialization and Deserialization </a><br/>
<a href="https://github.com/frohoff/ysoserial">A tool for generating payloads that exploit unsafe Java object deserialization</a><br/>
[1] <a href="https://gist.github.com/coekie/a27cc406fc9f3dc7a70d">Example of Denial of Service using the class <code>java.util.HashSet</code></a><br/>
[2] <a href="https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2015-2590">OpenJDK: Deserialization issue in ObjectInputStream.readSerialData() (CVE-2015-2590)</a><br/>
[3] <a href="https://www.rapid7.com/db/modules/exploit/multi/browser/java_calendar_deserialize">Rapid7: Sun Java Calendar Deserialization Privilege Escalation (CVE-2008-5353)</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_IN">PATH_TRAVERSAL_IN: Potential Path Traversal (file read)</a>
</h2>
            
<p>A file is opened to read its content. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>

<p>
    <b>Vulnerable Code:</b><br/>
<pre>@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", image); //Weak point

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>

<p>
    <b>Solution:</b><br/>
<pre>import org.apache.commons.io.FilenameUtils;

@GET
@Path("/images/{image}")
@Produces("images/*")
public Response getImage(@javax.ws.rs.PathParam("image") String image) {
    File file = new File("resources/images/", FilenameUtils.getName(image)); //Fix

    if (!file.exists()) {
        return Response.status(Status.NOT_FOUND).build();
    }

    return Response.ok().entity(new FileInputStream(file)).build();
}</pre>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="PATH_TRAVERSAL_OUT">PATH_TRAVERSAL_OUT: Potential Path Traversal (file write)</a>
</h2>
            
<p>A file is opened to write to its contents. The filename comes from an <b>input</b> parameter.
If an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.</p>
<p>This rule identifies <b>potential</b> path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.</p>
<br/>
<p>
<b>References</b><br/>
<a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal">WASC-33: Path Traversal</a><br/>
<a href="https://www.owasp.org/index.php/Path_Traversal">OWASP: Path Traversal</a><br/>
<a href="https://capec.mitre.org/data/definitions/126.html">CAPEC-126: Path Traversal</a><br/>
<a href="https://cwe.mitre.org/data/definitions/22.html">CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</a>
</p>

        
<h2>
<a name="URLCONNECTION_SSRF_FD">URLCONNECTION_SSRF_FD: URLConnection Server-Side Request Forgery (SSRF) and File Disclosure</a>
</h2>
            
<p>
    Server-Side Request Forgery occur when a web server executes a request to a user supplied destination
    parameter that is not validated. Such vulnerabilities could allow an attacker to access internal services
    or to launch attacks from your web server.
</p>
<p>
    URLConnection can be used with file:// protocol or other protocols to access local filesystem and potentially other services.
<p>
    <b>Vulnerable Code:</b>
<pre>
new URL(String url).openConnection()
</pre>

<pre>
new URL(String url).openStream()
</pre>

<pre>
new URL(String url).getContent()
</pre>
</p>
<p>
    <b>Solution/Countermeasures:</b><br/>
    <ul>
        <li>Don't accept URL destinations from users</li>
        <li>Accept a destination key, and use it to look up the target destination associate with the key</li>
        <li>White list URLs (if possible)</li>
        <li>Validate that the beginning of the URL is part of a white list</li>
    </ul>
</p>
<br/>
<p>
<b>References</b><br/>
<a href="https://cwe.mitre.org/data/definitions/918.html">CWE-918: Server-Side Request Forgery (SSRF)</a><br/>
<a href="https://www.bishopfox.com/blog/2015/04/vulnerable-by-design-understanding-server-side-request-forgery/">Understanding Server-Side Request Forgery</a><br/>
<a href="https://cwe.mitre.org/data/definitions/73.html">CWE-73: External Control of File Name or Path</a><br/>
<a href="https://www.pwntester.com/blog/2013/11/28/abusing-jar-downloads/">Abusing jar:// downloads</a><br />
</p>
            </body>
</html>
